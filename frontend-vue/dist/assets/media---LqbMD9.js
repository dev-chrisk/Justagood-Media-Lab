import{r as m,d as R,c as f,m as h}from"./index-D9jyHus0.js";class P{constructor(){this.eventSource=null,this.isConnected=m(!1),this.listeners=new Map,this.reconnectAttempts=0,this.maxReconnectAttempts=5,this.reconnectDelay=1e3}connect(){if(this.eventSource&&this.eventSource.readyState!==EventSource.CLOSED)return;const o=localStorage.getItem("authToken"),l=`http://127.0.0.1:8050/api/events${o?`?token=${o}`:""}`;this.eventSource=new EventSource(l),this.eventSource.onopen=()=>{console.log("SSE connection opened"),this.isConnected.value=!0,this.reconnectAttempts=0},this.eventSource.onmessage=i=>{try{const c=JSON.parse(i.data);this.handleMessage(c)}catch(c){console.error("Error parsing SSE message:",c)}},this.eventSource.onerror=i=>{console.error("SSE connection error:",i),this.isConnected.value=!1,this.handleReconnect()},this.eventSource.addEventListener("media.updated",i=>{try{const c=JSON.parse(i.data);this.handleMediaUpdate(c)}catch(c){console.error("Error parsing media update:",c)}})}handleMessage(o){switch(console.log("SSE message received:",o),o.type){case"connected":console.log("Connected to real-time updates");break;case"heartbeat":break;case"media_updated":this.handleMediaUpdate(o);break;default:console.log("Unknown message type:",o.type)}}handleMediaUpdate(o){console.log("Media update received:",o),this.listeners.forEach((u,l)=>{try{u(o)}catch(i){console.error(`Error in listener ${l}:`,i)}})}handleReconnect(){if(this.reconnectAttempts>=this.maxReconnectAttempts){console.error("Max reconnection attempts reached");return}this.reconnectAttempts++;const o=this.reconnectDelay*Math.pow(2,this.reconnectAttempts-1);console.log(`Attempting to reconnect in ${o}ms (attempt ${this.reconnectAttempts})`),setTimeout(()=>{this.disconnect(),this.connect()},o)}addListener(o,u){this.listeners.set(o,u)}removeListener(o){this.listeners.delete(o)}disconnect(){this.eventSource&&(this.eventSource.close(),this.eventSource=null),this.isConnected.value=!1}destroy(){this.disconnect(),this.listeners.clear()}}new P;const N=R("media",()=>{const n=m(p()),o=m("game"),u=m(""),l=m([]),i=m(!1),c=m(null);function p(){try{const e=localStorage.getItem("authToken"),t=localStorage.getItem("currentUser");if(!e||!t){const r=localStorage.getItem("mediaData");return r?JSON.parse(r):[]}return[]}catch(e){return console.error("Failed to load media from storage:",e),[]}}function g(){try{const e=localStorage.getItem("authToken"),t=localStorage.getItem("currentUser");(!e||!t)&&localStorage.setItem("mediaData",JSON.stringify(n.value))}catch(e){console.error("Failed to save media to storage:",e)}}const w=f(()=>n.value.length),y=f(()=>{const e={};return n.value.forEach(t=>{const r=t.category||"unknown";e[r]=(e[r]||0)+1}),e}),I=f(()=>{let e=[...n.value];if(o.value&&o.value!=="all"&&(e=e.filter(t=>o.value==="watchlist"?t.category==="watchlist"||t.isNew===!0:t.category===o.value)),u.value){const t=u.value.toLowerCase();e=e.filter(r=>{var a,s,d,S;return((a=r.title)==null?void 0:a.toLowerCase().includes(t))||((s=r.description)==null?void 0:s.toLowerCase().includes(t))||((d=r.genre)==null?void 0:d.toLowerCase().includes(t))||((S=r.platforms)==null?void 0:S.toLowerCase().includes(t))})}return l.value.forEach(t=>{t.type==="platform"?e=e.filter(r=>{var a;return(a=r.platforms)==null?void 0:a.toLowerCase().includes(t.value.toLowerCase())}):t.type==="genre"&&(e=e.filter(r=>{var a;return(a=r.genre)==null?void 0:a.toLowerCase().includes(t.value.toLowerCase())}))}),e});async function v(){var e,t;i.value=!0,c.value=null;try{const r=localStorage.getItem("authToken"),a=localStorage.getItem("currentUser");if(r&&a)try{const s=await h.getMedia();n.value=s||[]}catch(s){console.warn("API load failed for logged in user:",s),n.value=[]}else{const s=p();if(s.length>0)n.value=s;else{const d=await h.getMedia();n.value=d||[],g()}}}catch(r){c.value=((t=(e=r.response)==null?void 0:e.data)==null?void 0:t.message)||r.message||"Failed to load media data",console.error("Failed to load media:",r)}finally{i.value=!1}}function M(e){o.value=e}function k(e){u.value=e}function E(e){l.value.some(r=>r.type===e.type&&r.value===e.value)||l.value.push(e)}function A(e){l.value=l.value.filter(t=>!(t.type===e.type&&t.value===e.value))}function C(){l.value=[]}async function F(e){try{const t=localStorage.getItem("authToken"),r=localStorage.getItem("currentUser");if(t&&r)try{const a=await h.addMediaItem(e);return await v(),a}catch(a){throw console.error("API save failed for logged in user:",a),a}else{const a={id:Date.now(),...e,__order:n.value.length};return n.value.push(a),g(),a}}catch(t){throw c.value=t.message||"Failed to add media item",t}}async function L(e,t){try{const r=localStorage.getItem("authToken"),a=localStorage.getItem("currentUser");if(r&&a)try{const s=await h.updateMediaItem(e,t);return await v(),s}catch(s){throw console.error("API update failed for logged in user:",s),s}else{const s=n.value.findIndex(d=>d.id===e);if(s!==-1)return n.value[s]={...n.value[s],...t},g(),n.value[s];throw new Error("Media item not found")}}catch(r){throw c.value=r.message||"Failed to update media item",r}}async function U(e){try{const t=localStorage.getItem("authToken"),r=localStorage.getItem("currentUser");if(t&&r)try{return await h.deleteMediaItem(e),await v(),!0}catch(a){throw console.error("API delete failed for logged in user:",a),a}else{const a=n.value.findIndex(s=>s.id===e);if(a!==-1)return n.value.splice(a,1),g(),!0;throw new Error("Media item not found")}}catch(t){throw c.value=t.message||"Failed to delete media item",t}}async function b(e){try{const t=localStorage.getItem("authToken"),r=localStorage.getItem("currentUser");if(t&&r)try{const a=await h.batchAddMediaItems(e);return await v(),a}catch(a){throw console.error("API batch add failed for logged in user:",a),a}else{const a=e.map((s,d)=>({id:Date.now()+d,...s,__order:n.value.length+d}));return n.value.push(...a),g(),{success:!0,stats:{created:a.length,failed:0,errors:[]}}}}catch(t){throw c.value=t.message||"Failed to add media items",t}}async function T(e){try{const t=localStorage.getItem("authToken"),r=localStorage.getItem("currentUser");if(t&&r)try{return await h.batchDeleteMediaItems(e),await v(),!0}catch(a){throw console.error("API batch delete failed for logged in user:",a),a}else return n.value=n.value.filter(a=>!e.includes(a.id)),g(),!0}catch(t){throw c.value=t.message||"Failed to delete media items",t}}async function D(){try{const e=localStorage.getItem("authToken"),t=localStorage.getItem("currentUser");e&&t?await h.saveMedia(n.value):g()}catch(e){console.error("Failed to save media:",e)}}function x(){c.value=null}return{mediaData:n,currentCategory:o,searchQuery:u,activeFilters:l,loading:i,error:c,totalItems:w,categoryCounts:y,filteredMedia:I,loadMedia:v,setCategory:M,setSearchQuery:k,addFilter:E,removeFilter:A,clearFilters:C,addMediaItem:F,updateMediaItem:L,deleteMediaItem:U,batchAddMediaItems:b,batchDeleteMediaItems:T,saveMedia:D,clearError:x}});export{N as u};
